---
import * as interfaces from '../../lib/interfaces'
import {
  getPosts,
  getAllPosts,
  getRankedPosts,
  getPostBySlug,
  getPostsByTag,
  getBlock,
  getAllTags,
  getAllBlocksByBlockId,
  downloadFile,
} from '../../lib/notion/client'
import {
  getPostLink,
  filePath,
  extractTargetBlocks,
} from '../../lib/blog-helpers'
import PostDate from '../../components/PostDate.astro'
import PostTags from '../../components/PostTags.astro'
import PostTitle from '../../components/PostTitle.astro'
import PostBody from '../../components/PostBody.astro'
import PostRelativeLink from '../../components/PostRelativeLink.astro'
import BlogPostsLink from '../../components/BlogPostsLink.astro'
import BlogTagsLink from '../../components/BlogTagsLink.astro'
import styles from '../../styles/blog.module.css'
import Layout from '../../layouts/Layout.astro'
import Headline from '../../components/Headline.astro'

export async function getStaticPaths() {
  const posts = await getAllPosts()
  return posts.map((post: interfaces.Post) => ({
    params: { slug: post.Slug },
  }))
}

const { slug } = Astro.params

const post = await getPostBySlug(slug)
if (!post) {
  throw new Error('Post not found. slug: ${slug}')
}

const [blocks, allPosts, rankedPosts, recentPosts, tags, postsHavingSameTag] =
  await Promise.all([
    getAllBlocksByBlockId(post.PageId),
    getAllPosts(),
    getRankedPosts(),
    getPosts(5),
    getAllTags(),
    getPostsByTag(post.Tags[0]?.name, 6),
  ])

const fileAtacchedBlocks = extractTargetBlocks('image', blocks)
  .concat(extractTargetBlocks('file', blocks))
  .filter((block) => {
    if (!block) {
      return false
    }
    const imageOrFile = block.Image || block.File
    return imageOrFile && imageOrFile.File && imageOrFile.File.Url
  })

// Download files
await Promise.all(
  fileAtacchedBlocks
    .map(async (block) => {
      const expiryTime = (block.Image || block.File).File.ExpiryTime
      if (Date.parse(expiryTime) > Date.now()) {
        return Promise.resolve(block)
      }
      return getBlock(block.Id)
    })
    .map((promise) =>
      promise.then((block) => {
        let url!: URL
        try {
          url = new URL((block.Image || block.File).File.Url)
        } catch (err) {
          console.log('Invalid file URL')
          return Promise.reject()
        }
        return Promise.resolve(url)
      }),
    )
    .map((promise) => promise.then(downloadFile)),
)

const currentPostIndex = allPosts.findIndex((post) => post.Slug === slug)
const prevPost = allPosts[currentPostIndex + 1]
const nextPost = allPosts[currentPostIndex - 1]

let ogImage = ''
if (post.FeaturedImage && post.FeaturedImage.Url) {
  ogImage = new URL(
    filePath(new URL(post.FeaturedImage.Url)),
    Astro.site,
  ).toString()
}
---

<Layout
  title={post.Title}
  description={post.Excerpt}
  url={`blog/${slug}`}
  ogImage={ogImage}
>
  <Headline title={post.Title}>
    <p class="mt-4 text-lg text-gray-300">
      CloudNative Days実行委員会によるブログ
    </p>
  </Headline>
  <div class="flex flex-wrap mx-auto justify-center pt-4 bg-white">
    <main class="w-full lg:w-8/12 max-w-4xl lg:mx-20 mx-10 px-5">
      <div class="leading-8">
        <div class="flex flex-col">
          <PostDate post={post} />
          <div class="mb-2 border-b-2 border-gray-200"></div>
          <PostTitle post={post} enableLink={false} />
          <div class="mt-4">
            <PostTags post={post} />
          </div>
        </div>
        <PostBody blocks={blocks} />
      </div>
      <footer>
        <PostRelativeLink prevPost={prevPost} nextPost={nextPost} />
      </footer>
    </main>

    <div class="flex flex-wrap w-full lg:w-8/12 max-w-4xl lg:mx-20 mx-10 px-5">
      <aside class="w-1/2 mt-10">
        <BlogPostsLink
          heading="Posts in the same category"
          posts={postsHavingSameTag.filter(
            (p: interfaces.Post) => p.Slug !== post.Slug,
          )}
        />
        <BlogPostsLink heading="Recommended" posts={rankedPosts} />
      </aside>
      <aside class="w-1/2 mt-10">
        <BlogPostsLink heading="Latest posts" posts={recentPosts} />
        <BlogTagsLink heading="Categories" tags={tags} />
      </aside>
    </div>
  </div>
</Layout>
