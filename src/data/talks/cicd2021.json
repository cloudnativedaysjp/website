[
  {
    "id": 1129,
    "conferenceId": 3,
    "trackId": 18,
    "videoPlatform": null,
    "videoId": "595124628",
    "title": "複数ブランチ運用は『単一のコードベース』と言えるのか",
    "abstract": "かの有名な The Twelve-Factor App は、その「コードベース」の章で「一つのコードベースと複数のデプロイ」が重要であると説いています。[1]\r\n\r\n周りを見渡してみましょう。develop ブランチ release ブランチ main ブランチ...\r\n\r\nおやおや。複数のコードベースから複数のデプロイが生まれているではありませんか。\r\n\r\nThe Twelve-Factor App はもう古い、そんなのできていて当たり前などという言葉が聞こえてくることもある昨今ですが、そもそも当たり前すぎるセオリーすら満たせていない現場はあまりにも多そうです。\r\n\r\nThe Twelve-Factor App が間違っているのか？それとも現場の運用が間違っているのか？そもそも複数ブランチにして何か問題があるんですか？別に良くないですか？\r\n\r\nそんな思いを皆さまと共有しつつ、複数ブランチ運用と単一のコードベースについて探究していくセッションです。\r\n\r\n[1]: https://12factor.net/ja/codebase",
    "speakers": [
      {
        "id": 1091,
        "name": "Tori Hara"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T16:25:00.000+09:00",
    "endTime": "2000-01-01T17:05:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/toricls/what-are-your-justifications-for-the-multi-branches",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1132,
    "conferenceId": 3,
    "trackId": 19,
    "videoPlatform": null,
    "videoId": "596830283",
    "title": "Helm/ArgoCD で実現する Kubernetes における宣言的リソースデリバリーの実践",
    "abstract": "弊社、株式会社ユーザベースでは、Jenkins を主な CI/CD ツールとして Kubernetes に対するリソースデプロイ等を実行しています。\r\n\r\nパイプライン内では、e2e/開発/本番環境別に対応するマニフェストファイルの生成やそのデプロイをする必要がありますが、自前で実装した複雑なシェルスクリプトを利用していたり、kubectl コマンドをパイプライン内で直接実行していたりと、非常に手続き的で課題の多い実装になっていました。\r\n\r\nこれらの問題を、Helm と ArgoCD を利用した GitOps 化することでどのように解決したか課題の内容とともに紹介します。",
    "speakers": [
      {
        "id": 1094,
        "name": "Shota Suzuki"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T16:25:00.000+09:00",
    "endTime": "2000-01-01T17:05:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/sshota0809/argocd-teshi-xian-suru-kubernetes-niokeruxuan-yan-de-risosuteriharifalseshi-jian",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1138,
    "conferenceId": 3,
    "trackId": 19,
    "videoPlatform": null,
    "videoId": "596830019",
    "title": "プログラミング言語RubyのCIの裏側",
    "abstract": "プログラミング言語Rubyの開発に使われているCIは、一般的なアプリケーションのCIと異なり以下のような要件を満たす必要があります。\r\n\r\n* Ruby が実行されるであろう複数のプラットフォーム(例: macOS, Linux, Windows, ...)\r\n* プラットフォームごとのディストリビューション(例: Debian, Ubuntu, RHEL, ...)\r\n* プラットフォームごとの複数のバージョン(例: Debian 8.9.10...)\r\n* 言語のコンパイルオプション\r\n\r\n上記について可能な限り網羅した上でさらに開発のスピードに合わせたフィードバックを可能な鍵り同期的に行うように複数のシステムからなる CI を構築しています。本発表では上記に示したような要件を満たす CI の全体像や構築に関するノウハウなどをご紹介します。",
    "speakers": [
      {
        "id": 1102,
        "name": "Hiroshi SHIBATA"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T18:05:00.000+09:00",
    "endTime": "2000-01-01T18:45:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "上級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://www.slideshare.net/hsbt/the-details-of-cicd-environment-for-ruby",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1146,
    "conferenceId": 3,
    "trackId": 18,
    "videoPlatform": null,
    "videoId": "595125417",
    "title": "大規模オンプレミス環境はGitOpsの夢を見るか",
    "abstract": "クラウドシフトが叫ばれて久しい昨今、オンプレミス環境というと時代遅れの印象をもたれる事も多いですが、まだまだ現役で活躍しているシステムも多く、新規システムであってもオンプレミス環境で構築することは決して少なくはありません。しかしモダンなアプリケーションデリバリの仕組みや手法は多くがクラウド前提で考えられており、旧来のオンプレミス環境でクラウド環境のようにインフラまで統合した自動化を実現することはできないと考えている人も少なくはないでしょう。だけどオンプレミス環境だってイマドキな姿に変身できるのです。本セッションではNTTデータで大規模トラディショナルシステムにおける開発環境のモダナイゼーションを推進してきた経験を基に、トラディショナルな大規模オンプレミス環境におけるCI/CDの適用、ならびにGitOpsプラクティス適用の勘所を紹介していきます。",
    "speakers": [
      {
        "id": 1109,
        "name": "Ryo Sugahara"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T18:05:00.000+09:00",
    "endTime": "2000-01-01T18:45:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "初級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://www.slideshare.net/nttdata-tech/gitops-and-on-premises-ci-cd-conference-2021",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1152,
    "conferenceId": 3,
    "trackId": 19,
    "videoPlatform": null,
    "videoId": "596829103",
    "title": "CI/CDのボトルネックを把握できていますか？BigQueryでビルド情報ダッシュボードを構築した話",
    "abstract": "開発人数が多く、規模の大きいプロダクトでは最終的な成果物をビルドするだけで1時間以上かかってしまうことも珍しくありません。ですが最初からそれほど時間がかかっていたわけではなく、時間とともに巨大化するコードベース、追加されたステップなどによりいつの間にかどこかの処理がボトルネックとなっていることが多いでしょう。\r\n\r\nCIサービスの多くは成功/失敗の情報、全体としてのビルド時間の情報は見やすく提供していますが、各ステップの時間やステップのエラー率などの細かい粒度の情報を時系列で確認する機能までは提供されていないことが多いです。そのため、ボトルネック箇所を特定するためには過去の生ビルドログを自分の目で確認するコストが高い作業が必要でした。\r\n\r\nそこで、Jenkins, CircleCI, Github Actions, BitiseのビルドデータをAPI経由で取得してBigQueryに蓄積するCIAnalyzerというツールを開発しました。さらにDataPortalでダッシュボードを作成してデータを可視化したことで、例えば以下のような問題の解決に役立ちました。\r\n\r\n- 半年、1年前と比較してボトルネックとなっているステップの発見\r\n- 不規則に発生する厄介なビルドエラーがいつから起きているのかの特定\r\n\r\nこれ以外にも実際の業務で問題の解決に役立った事例をいくつか紹介しながら、CI/CDのデータを長期に蓄積して分析することの重要性をお伝えしたいと思います。\r\n\r\n参考：\r\nhttps://github.com/Kesin11/CIAnalyzer",
    "speakers": [
      {
        "id": 1113,
        "name": "Kenta Kase"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T13:05:00.000+09:00",
    "endTime": "2000-01-01T13:45:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "初級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/kesin11/cdfalsebotorunetukuwoba-wo-dekiteimasuka-bigquerydebirudoqing-bao-datusiyubodowogou-zhu-sitahua",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1153,
    "conferenceId": 3,
    "trackId": 17,
    "videoPlatform": null,
    "videoId": "596833759",
    "title": "接触確認アプリ「COCOA」OSSモバイルアプリのCI整備の難しさ",
    "abstract": "接触確認アプリ「COCOA」オープンソースプロジェクトのコラボレーターをしている有山です。\r\n先頃、コードレビューの負荷を下げてPull Requestの取り込みを促進するため、GitHub Actionsを使ったCIを整備しました。\r\nCI導入にあたっての接触確認アプリ特有の制約と、Xamarinというプラットフォームの難しさ。一通り動くものを作ったら、通りすがりのコントリビューターが一晩で最適化したエピソードを交えて発表します。",
    "speakers": [
      {
        "id": 1114,
        "name": "Kuu & ARIYAMA Keiji"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T14:45:00.000+09:00",
    "endTime": "2000-01-01T15:25:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "初級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://blog.keiji.dev/2021/09/ci-cd-conference-2021/",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1154,
    "conferenceId": 3,
    "trackId": 17,
    "videoPlatform": null,
    "videoId": "595122006",
    "title": "OSSで作る機械学習のCI/CD",
    "abstract": "機械学習のモデル開発では2種類のテストがあります。プログラム自体のユニットテストと、機械学習モデルの評価としてのテストです。前者はコーディングの妥当性やカバレッジでレビューできますが、後者はコーディングのみで評価することができません。\r\n本セッションでは両方のテストをGithub Actionsで実行し、プログラムの正常性と機械学習モデル開発の妥当性を評価する仕組みを説明します。機械学習のテストのためにはモデルを評価するデータの管理が必要であり、そのツールとしてDVCというOSSを使います。評価自体にはCMLというOSSを使い、Github Actionsの中で機械学習モデルを実行し、DVCから得たデータで評価した結果をPRと連携します。\r\n機械学習のモデル開発に伴うデータ管理や評価をGitFlowとして管理し、機械学習開発の品質向上を目指します。",
    "speakers": [
      {
        "id": 1115,
        "name": "Yusuke Shibui"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T13:05:00.000+09:00",
    "endTime": "2000-01-01T13:45:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": true,
    "documentUrl": "https://www.slideshare.net/yusukeshibui/machine-learning-cicd-with-oss",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1155,
    "conferenceId": 3,
    "trackId": 17,
    "videoPlatform": null,
    "videoId": "596829503",
    "title": "数時間かかる週一リリースを毎日何度も爆速でできるようにするまで",
    "abstract": "私が入社したころの弊社のリリースフローは、リリースブランチへの煩雑なcherry-pickの後、長いチェックリストやチケットを手動で更新した後、定期実行テストを待って次の日にデプロイ対象の変更をpushしたら、デプロイ対象のサーバー上で30分に一回実行されるcronでデプロイされるが、ランダムに失敗するので全台デプロイされるまでに数時間かかるというものでした。\r\nあまりにも大変なのでリリースは多くても週一回しか行なわれず、変更粒度が大きくなるため毎度リスクが高いものになり、また何か起きた時もロールバックに時間がかかる厳しい状態でした。\r\n\r\n今では、数百あるデプロイ対象の全てが当時とは異なるデプロイ方法に移行し、その他多くの自動化、監視やテストの拡充により、多くのサービスで小さなデプロイを継続的かつ高速に行なえるようになりました。これに関して、本セッションでは以下のような内容をお話しします。\r\n\r\n* リリースはなぜ継続的に行なう必要があるか\r\n* 継続的なリリースの妨げとなること、またそれをどう解決するか\r\n* 安全にリリースを行なうために事前に満たすべきこと\r\n* CodeDeploy, Terraform を活用したデプロイ基盤とオートメーション",
    "speakers": [
      {
        "id": 1117,
        "name": "k0kubun"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T18:05:00.000+09:00",
    "endTime": "2000-01-01T18:45:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "初級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/k0kubun/cd-conference-2021",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1162,
    "conferenceId": 3,
    "trackId": 19,
    "videoPlatform": null,
    "videoId": "596830073",
    "title": "現場に合わせて考えた パイプラインのデザインパターン",
    "abstract": "私たちは、多くのプロジェクトやチームに対して組織的に CI/CD を導入していくケースを経験してきました。そこでは、各チームは様々な習熟度のメンバーから構成されることが一般的です。そのような状況における CI/CD 導入経験をもとに、パイプラインの定義や各種設定をどのように標準化し、どのように適用していくかについて、いくつかのパターンを整理してご紹介します。",
    "speakers": [
      {
        "id": 1122,
        "name": "土屋 大樹"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T14:45:00.000+09:00",
    "endTime": "2000-01-01T15:25:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "初級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1163,
    "conferenceId": 3,
    "trackId": 18,
    "videoPlatform": null,
    "videoId": "595122390",
    "title": "デプロイメントパイプラインの原理原則を再確認する",
    "abstract": "昨今では様々な CI / CD に関する技術が登場し、多くの開発者の方が CI / CD パイプラインを構築・運用されているのではないでしょうか。しかし CI / CD に関するツールを導入しただけでは、 CI / CD を実践している、恩恵を受けているとは言えないと考えています。\r\n\r\nこのセッションでは、デプロイメントパイプライン (CI / CD を含めた、ソフトウェアをバージョン管理にチェックインしてからユーザーの手に渡すまでのプロセス) の原理原則を再確認し、より効果的なデプロイメントパイプラインを構築・運用できるようなヒントとなるセッションを目指したいと思います。\r\n\r\n以下のような内容を想定しています。\r\n\r\n・科学的な視点から、なぜデプロイメントパイプラインを構築する必要があるか\r\n・デプロイメントパイプラインにはどのようなステージが存在し、ステージごとに何をすればよいか\r\n・CI / CD はツールではなくプラクティスである\r\n・デプロイメントパイプラインをいつ、どのように構築するか\r\n・スクラムの Definition of Done とデプロイメントパイプラインを関連させる\r\n・デプロイメントパイプラインで実施する自動テスト戦略\r\n・セキュリティ・パフォーマンステストをデプロイメントパイプラインで実現する",
    "speakers": [
      {
        "id": 1123,
        "name": "Tomoaki Takaichi"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T13:05:00.000+09:00",
    "endTime": "2000-01-01T13:45:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/takaichi00/confirm-deployment-pipeline-principle",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1164,
    "conferenceId": 3,
    "trackId": 17,
    "videoPlatform": null,
    "videoId": "595124240",
    "title": "大規模ゲーム開発を支えるAzure DevOpsによるクラウドネイティブなCI/CDの紹介",
    "abstract": "近年ますます複雑化・大規模化するゲーム制作の開発・テストチームを支えるCI/CDパイプラインについて、Azure DevOpsと様々なクラウドネイティブなサービスを活用することでパフォーマンスとTCOを最適化していく取り組みを事例とともに紹介します。\r\n特に、UnityやUnrealなどのゲームエンジンを採用したアプリのビルドにまつわる様々な側面と、それに対応したビルドサーバVMのカスタマイズ、さらにAzure Pipelinesによるオーケストレーションについて、知見を共有したいと思います。",
    "speakers": [
      {
        "id": 1124,
        "name": "Takeshi Yaegashi"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T16:25:00.000+09:00",
    "endTime": "2000-01-01T17:05:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/yaegashi/cdfalseshao-jie",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1171,
    "conferenceId": 3,
    "trackId": 18,
    "videoPlatform": null,
    "videoId": "595123041",
    "title": "君のセキュリティはデプロイするまでもなく間違っている",
    "abstract": "S3 オブジェクトを不必要に公開してしまったり、あるいは遮断されるべきネットワークが繋がってしまったりといったセキュリティ上の設定ミスは、可能な限り避けたいものです。\r\n\r\nこのようなインフラ層に対するテストを従来の CI/CD の一部として組み込む場合、「個別の設定項目が条件を満たすことを確認する」または「実際にデプロイした環境に対してアクセスしてみる」といった形でテストを行うことが一般的でしょう。\r\n\r\nしかしセキュリティ設定には、「複数の設定項目が絡み合った結果、最終的なアクセス可否が定まる」かつ「実際にデプロイする前に影響範囲を知りたい」といった要求があり、上にあげたテストの形式とはあまり相性が良くないのが事実です。\r\n\r\nこの問題に対して有効な手法の一つが Automated Reasoning です。Automated Reasoning では、設定項目を数学的に解析することで、実際のデプロイやアクセスを行うことなく、アクセスが可能かどうかだけを「推論」させることができます。\r\n\r\n本セッションでは、我々エンドユーザが実際に Automated Reasoning を活用できる例として AWS の Access Analyzer を取り上げ、背景にある数学的な理論や関連論文も含めて解説したいと思います。",
    "speakers": [
      {
        "id": 1131,
        "name": "Cheshire Cat"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T14:45:00.000+09:00",
    "endTime": "2000-01-01T15:25:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "上級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/ytaka23/cicd-conference-2021",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1176,
    "conferenceId": 3,
    "trackId": 17,
    "videoPlatform": null,
    "videoId": "596829539",
    "title": "State of DevOps Report 2020からみるCI/CDの始め方",
    "abstract": "CI/CDの普及が本格化している中、まだ着手できていない企業も数多く存在しています。本セッションではCircleCIが日本語版を翻訳したState of DevOps Report 2020を見ながら、DevOpsの現状を俯瞰し、これからCI/CDに着手したい方が何を考えるべきなのか、ツールの機能だけではない広め方に視点を向けてお話をさせて頂きます。",
    "speakers": [
      {
        "id": 1136,
        "name": "Noboru Kurumai"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T13:55:00.000+09:00",
    "endTime": "2000-01-01T14:35:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "初級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/kurumai/cdfalseshi-mefang",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1177,
    "conferenceId": 3,
    "trackId": 17,
    "videoPlatform": null,
    "videoId": "596829576",
    "title": "高品質・セキュア・スピーディなソフトウェア開発を実現するクラウドネイティブ時代のDevSecOpsとシフトレフト手法",
    "abstract": "市場の高機能・高付加価値提供のニーズの高まりに伴い、ソフトウェアが膨大・複雑化し続けている中で、高品質開発をスピーディに行っていくことと、セキュリティの堅牢化を実現するというこの二つの相反する課題を解決する必要があります。\r\n\r\n本セッションではDevSecOps導入によるこれらの課題の解決と、シフトレフトによる手戻りを最小化した効率的な解決手法について、シノプシスのソリューションも交えながら、最新のアプローチを紹介します。バグや脆弱性をコードを書いたその場で解消することで手戻りを最小化するとともに開発者の習熟度をも向上させ、ソフトウェアやクラウド環境の脆弱性や構成を継続的に管理することで開発フェーズから運用フェーズまでを一貫してセキュアに保つ方法を包括的に紹介します。\r\n\r\n加えて、アプリケーションセキュリティの統合的管理基盤を紹介します。これにより、プロジェクトの品質やセキュリティ上の問題について俯瞰的に把握することができ、様々な角度、切り口からプロジェクトの状態を確認し、発生している問題を効果的に把握することができます。\r\n\r\n開発者の方から管理者の方、ソフトウェア開発のビジネス上の課題を抱えている方まで幅広い方を対象にしています。ご気軽にお立寄りください。",
    "speakers": [
      {
        "id": 1137,
        "name": "Sho Kawahara"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T17:15:00.000+09:00",
    "endTime": "2000-01-01T17:55:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://www.synopsys.com/ja-jp/software-integrity/em/20210903_CICD-Conf.html",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1178,
    "conferenceId": 3,
    "trackId": 18,
    "videoPlatform": null,
    "videoId": "595131096",
    "title": "GitHub Actions で構築する Android アプリの CI/CD",
    "abstract": "GitHub Actions は GitHub 謹製のタスクの実行環境です。外部サービスの契約や連携を必要とせず気軽に利用でき、GitHub 上での開発フローとも相性が良いです。また GitHub のマーケットプレイスでは、様々な Actions（ワークフローをパッケージ化したもの）が公開されており、また自ら Actions を作成することも出来ます。\r\n\r\n私はこれまで業務の Android アプリの開発で GitHub Actions を利用し、静的解析・テスト・ビルド・バイナリの配布といった CI/CD の環境を構築し運用してきました。\r\n\r\n本セッションでは、その構築・運用の内容や得られた知見、工夫した点、注意事項など説明します。皆様の CI/CD 環境構築の手助けになれば幸いです。",
    "speakers": [
      {
        "id": 1138,
        "name": "Hiroyuki Kusu"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T15:35:00.000+09:00",
    "endTime": "2000-01-01T16:15:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "初級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://speakerdeck.com/hkusu/cd",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1179,
    "conferenceId": 3,
    "trackId": 18,
    "videoPlatform": null,
    "videoId": "595130834",
    "title": "LINEのPrivate Cloudを支えるデプロイ基盤の課題解決に向けた取り組み",
    "abstract": "私達が開発しているLINEのPrivate Cloud PlatformであるVerdaは、社内開発者向けに多種多様なインフラサービスを管理してます。そして、あるサービスが別のVerdaサービスに依存していることも多く、大局的に見るとデザインの中に大量の疎結合部が存在する複雑性の高いMSAとして稼動しています。\r\n\r\nそのような前提の元、最近はサービス規模と提供サービスの種類の拡大に応じてデザインの複雑度やトラブル時の影響度が上がってきているのですが、それぞれのサービスのデプロイプロセスはその状況変化に追従できておらず、デプロイの管理コストが大きくなっていることが課題として見えてきました。\r\n\r\nこのセッションではVerdaのデプロイについて簡単に歴史の振り返りと課題の明確化を行ない、それをどのように解決するべきかのアイデアといくつかの実例についてご紹介します。",
    "speakers": [
      {
        "id": 1135,
        "name": "Wataru Manji"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T13:55:00.000+09:00",
    "endTime": "2000-01-01T14:35:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1180,
    "conferenceId": 3,
    "trackId": 18,
    "videoPlatform": null,
    "videoId": "595131412",
    "title": "CyberAgent における OSS の CI/CD 基盤開発",
    "abstract": "発表資料\r\nhttps://www.slideshare.net/whywaita/cyberagent-oss-cicd-myshoes-cicd2021\r\nhttps://speakerdeck.com/nghialv/pipecd-at-cyberagent\r\n\r\n---\r\nサイバーエージェントではGitHub Actionsにおけるself-hosted runnerを便利に活用するための管理ツールとしてmyshoesを開発しています。\r\nmyshoesはGitHub-hosted runnerに近い使用感を、様々なインフラに沿うような形でself-hosted runnerを展開できるソフトウェアです。\r\n\r\n本セッションではmyshoesの開発の経緯に触れながら、内部実装やアーキテクチャについてご紹介します。\r\n\r\n参考リンク: https://github.com/whywaita/myshoes\r\n---\r\nCyberAgentで開発されている PipeCD (https://pipecd.dev) について話したいと思います。\r\nなぜ作りましたか。PipeCDでインフラストラクチャからアプリケーション (Kubernetes, Serverless, ECS)まで様々な種類を統一なGitOps的なデリバリーをどうやって実現していますか。開発者へ高速なFeedbackを出せる方法は何があるのか。また、現在社内で450アプリケーション・システムをPipeCDで動いているので、知見と将来の企画を共有したいと思います。",
    "speakers": [
      {
        "id": 1139,
        "name": "Kento Nakanishi / Le Van Nghia"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T17:15:00.000+09:00",
    "endTime": "2000-01-01T17:55:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "https://www.slideshare.net/whywaita/cyberagent-oss-cicd-myshoes-cicd2021, https://speakerdeck.com/nghialv/pipecd-at-cyberagent",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  },
  {
    "id": 1185,
    "conferenceId": 3,
    "trackId": 17,
    "videoPlatform": null,
    "videoId": "596830219",
    "title": "GitHub のエコシステム ~ GitHub Actions, Codespaces そして Copilot",
    "abstract": "Microsoft と GitHub がともに歩んでいくことをアナウンスしてから 3 年が経過しました。この3年間で GitHub は進化し、もはやただのソースコード管理ツールに止まらないエコシステムを形成しています。\r\n\r\nGitHub Actions は Azurer Pipelines との融合で大幅にパワーアップし、開発時に身近な、そしてソースコードにも一番近い CI/CD ツールとなりました。\r\n\r\nGitHub Codespaces には Visual Studio Code が組み込まれ、開発環境とデプロイメントパイプラインの距離を一気に縮めています。そして、Open AI と共同で開発された GitHub Copilot のエンジンはコード生成においてGPT-3よりも大幅に高い能力を持っている OpenAI Codex が搭載されています。\r\n\r\n本セッションでは、どんどん新しくなる GitHub のエコシステムをご紹介しながら、開発環境の進化を皆様と一緒に体験していきたいと思います。\r\nGitHub and Microsoft = Better Together",
    "speakers": [
      {
        "id": 1145,
        "name": "服部 佑樹"
      }
    ],
    "dayId": 9,
    "showOnTimetable": true,
    "startTime": "2000-01-01T15:35:00.000+09:00",
    "endTime": "2000-01-01T16:15:00.000+09:00",
    "talkDuration": 0,
    "talkDifficulty": "中級者",
    "talkCategory": "",
    "onAir": false,
    "documentUrl": "",
    "conferenceDayId": 9,
    "conferenceDayDate": "2021-09-03",
    "presentationMethod": null
  }
]